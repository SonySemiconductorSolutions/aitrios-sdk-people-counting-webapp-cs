{
	"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"UniqueId": {
			"type": "string",
			"defaultValue": "[take(uniqueString(resourceGroup().id), 5)]",
			"minLength": 3,
			"maxLength": 5,
			"metadata": {
				"description": "String to generate unique names"
			}
		},
		"location": {
			"type": "string",
			"defaultValue": "[resourceGroup().location]"
		},
		"web_app_name": {
			"type": "string",
			"minLength": 1,
			"maxLength": 40,
			"defaultValue": "app-soltemplate-peoplecounting"
		},
		"function_app_A_name": {
			"type": "string",
			"minLength": 1,
			"maxLength": 40,
			"defaultValue": "funcA-soltemplate"
		},
		"function_app_B_name": {
			"type": "string",
			"minLength": 1,
			"maxLength": 40,
			"defaultValue": "funcB-soltemplate"
		},
		"cosmosdb_name": {
			"type": "string",
			"minLength": 1,
			"maxLength": 40,
			"defaultValue": "cosmosdb-soltemplate"
		},
		"signalr_name": {
			"type": "string",
			"minLength": 3,
			"maxLength": 63,
			"defaultValue": "singnalr-soltemplate"
		},
		"eventhub_name": {
			"type": "string",
			"minLength": 3,
			"maxLength": 63,
			"defaultValue": "eventhub-soltemplate"
		},
		"storage_account_name": {
			"type": "string",
			"defaultValue": "strsoltemplate"
		},
		"table_name": {
			"type": "string",
			"defaultValue": "tablesoltemplate"
		},
		"storage_account_type": {
			"type": "string",
			"defaultValue": "Standard_LRS"
		},
		"aitrios_url": {
			"type": "string",
			"metadata": {
				"description": "Base URL for AITRIOS API."
			}
		},
		"token_url": {
			"type": "string",
			"metadata": {
				"description": "Token URL for AITRIOS API."
			}
		},
		"aitrios_client_id": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Client id for AITRIOS API."
			}
		},
		"aitrios_client_secret": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Client secret for AITRIOS API."
			}
		},
		"aad_tenant_id": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Optionally provide Tenant ID for Azure Active Directory (AAD) authentication."
			}
		},
		"aad_client_id": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Optionally provide Client ID for Azure Active Directory (AAD) authentication."
			}
		}
	},
	"variables": {
		"apps": {
			"apiVersion": "2022-03-01",
			"skuName": "S1",
			"tier": "Standard",
			"size": "S1",
			"family": "S",
			"hostingPlan": "[format('{0}-AppHost-{1}', parameters('web_app_name'),parameters('UniqueID'))]",
			"functionsAName": "[format('{0}-{1}', parameters('function_app_A_name'),parameters('UniqueID'))]",
			"functionsBName": "[format('{0}-{1}', parameters('function_app_B_name'),parameters('UniqueID'))]",
			"webappName": "[parameters('web_app_name')]"
		},
		"signalr": {
			"apiVersion": "2022-02-01",
			"sku": "Standard_S1",
			"skuTier": "Standard",
			"name": "[format('{0}-{1}', parameters('signalr_name'),parameters('UniqueID'))]"
		},
		"eventhub": {
			"apiVersion": "2022-01-01-preview",
			"sku": "Standard",
			"tier": "Standard",
			"capacity": 1,
			"name": "[format('{0}-{1}', parameters('eventhub_name'),parameters('UniqueID'))]"
		},
		"cosmosdb": {
			"apiVersion": "2022-11-15",
			"name": "[format('{0}-{1}', parameters('cosmosdb_name'),parameters('UniqueID'))]"
		},
		"table": {
			"apiVersion": "2021-09-01",
			"sku": "[parameters('storage_account_type')]",
			"tier": "Standard",
			"name": "[toLower(format('{0}{1}', parameters('table_name'),parameters('UniqueID')))]"
		},
		"storageAcct": {
			"apiVersion": "2021-09-01",
			"sku": "[parameters('storage_account_type')]",
			"tier": "Standard",
			"name": "[toLower(format('{0}{1}', parameters('storage_account_name'),parameters('UniqueID')))]"
		}
	},
	"resources": [
		{
			"type": "Microsoft.Storage/storageAccounts",
			"apiVersion": "[variables('storageAcct').apiVersion]",
			"name": "[variables('storageAcct').name]",
			"location": "[parameters('location')]",
			"tags": {},
			"sku": {
				"name": "[variables('storageAcct').sku]"
			},
			"kind": "StorageV2"
		},
		{
			"type": "Microsoft.Storage/storageAccounts",
			"apiVersion": "[variables('table').apiVersion]",
			"name": "[variables('table').name]",
			"location": "[parameters('location')]",
			"tags": {},
			"sku": {
				"name": "[variables('table').sku]"
			},
			"kind": "StorageV2"
		},
		{
            "type": "Microsoft.Storage/storageAccounts/tableServices",
            "apiVersion": "[variables('table').apiVersion]",
            "name": "[concat(variables('table').name, '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('table').name)]"
            ],
            "sku": {
                "name": "[variables('table').sku]"
            }
        },
		{
            "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
            "apiVersion": "[variables('table').apiVersion]",
            "name": "[concat(variables('table').name, '/default/', 'notifications')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/tableServices', variables('table').name, 'default')]"
            ]
        },
		{
			"type": "Microsoft.EventHub/namespaces",
			"apiVersion": "[variables('eventhub').apiVersion]",
			"name": "[variables('eventhub').name]",
			"location": "[parameters('location')]",
			"sku": {
				"name": "[variables('eventhub').sku]",
				"tier": "[variables('eventhub').tier]",
				"capacity": "[variables('eventhub').capacity]"
			}
		},
		{
			"type": "Microsoft.EventHub/namespaces/authorizationrules",
			"apiVersion": "2022-01-01-preview",
			"name": "[concat(variables('eventhub').name, '/RootManageSharedAccessKey')]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[resourceId('Microsoft.EventHub/namespaces', variables('eventhub').name)]"
			],
			"properties": {
				"rights": [
					"Listen",
					"Manage",
					"Send"
				]
			}
		},
		{
			"type": "Microsoft.EventHub/namespaces/eventhubs",
			"apiVersion": "[variables('eventhub').apiVersion]",
			"name": "[concat(variables('eventhub').name, '/sonysmartcamera')]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[resourceId('Microsoft.EventHub/namespaces', variables('eventhub').name)]"
			],
			"properties": {
				"messageRetentionInDays": 1,
				"partitionCount": 1,
				"status": "Active"
			}
		},
		{
			"type": "Microsoft.Web/serverfarms",
			"apiVersion": "[variables('apps').apiVersion]",
			"name": "[variables('apps').hostingPlan]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('storageAcct').name)]"
			],
			"sku": {
				"name": "[variables('apps').skuName]",
				"tier": "[variables('apps').tier]",
				"size": "[variables('apps').size]",
				"family": "[variables('apps').family]",
				"capacity": 1
			},
			"kind": "app",
			"properties": {
				"reserved": false
			}
		},
		{
			"type": "Microsoft.SignalRService/SignalR",
			"apiVersion": "[variables('signalr').apiVersion]",
			"name": "[variables('signalr').name]",
			"location": "[parameters('location')]",
			"tags": {},
			"sku": {
				"name": "[variables('signalr').sku]",
				"tier": "[variables('signalr').skuTier]",
				"capacity": 1
			},
			"kind": "SignalR",
			"dependsOn": [
			],
			"properties": {
				"tls": {
					"clientCertEnabled": false
				},
				"features": [
					{
						"flag": "ServiceMode",
						"value": "Classic",
						"properties": {}
					}
				],
				"cors": {
					"allowedOrigins": [
						"[toLower(format('https://{0}.azurewebsites.net', variables('apps').webappName))]",
						"http://localhost:8000"
					]
				}
			}

		},
		{
			"type": "Microsoft.Web/sites",
			"apiVersion": "[variables('apps').apiVersion]",
			"name": "[variables('apps').webappName]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('storageAcct').name)]",
				"[resourceId('Microsoft.Web/serverfarms', variables('apps').hostingPlan)]"
			],
			"tags": {},
			"kind": "app",
			"properties": {
				"enabled": true,
				"serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('apps').hostingPlan)]"
			}
		},
		{
			"type": "Microsoft.Web/sites/config",
			"apiVersion": "[variables('apps').apiVersion]",
			"name": "[concat(variables('apps').webappName, '/appsettings')]",
			"dependsOn": [
				"[resourceId('Microsoft.SignalRService/SignalR', variables('signalr').name)]",
				"[resourceId('Microsoft.Storage/storageAccounts', variables('table').name)]",
				"[resourceId('Microsoft.Web/Sites', variables('apps').webappName)]"
			],
			"properties": {
				"AzureAD__TenantId": "[if(or(empty(parameters('aad_tenant_id')), empty(parameters('aad_client_id'))), '', parameters('aad_tenant_id'))]",
				"AzureAD__ClientId": "[if(or(empty(parameters('aad_tenant_id')), empty(parameters('aad_client_id'))), '', parameters('aad_client_id'))]",
				"AzureAD__Instance": "[if(or(empty(parameters('aad_tenant_id')), empty(parameters('aad_client_id'))), '', 'https://login.microsoftonline.com/')]",
				"AzureAD__CallbackPath": "[if(or(empty(parameters('aad_tenant_id')), empty(parameters('aad_client_id'))), '', '/signin-oidc')]",
				"AzureAD__SignedOutCallbackPath": "[if(or(empty(parameters('aad_tenant_id')), empty(parameters('aad_client_id'))), '', '/signout-callback-oidc')]",
				"Azure__UseAAD": "[if(or(empty(parameters('aad_tenant_id')), empty(parameters('aad_client_id'))), 'false', 'true')]",
				"Azure__SonyAPI__BaseUrl": "[parameters('aitrios_url')]",
				"Azure__SonyAPI__TokenUrl": "[parameters('token_url')]",
				"Azure__SonyAPI__ClientId": "[parameters('aitrios_client_id')]",
				"Azure__SonyAPI__ClientSecret": "[parameters('aitrios_client_secret')]",
				"Azure__SignalR__ConnectionString": "[concat('Endpoint=https://', toLower(variables('signalr').name), '.service.signalr.net;AccessKey=', listKeys(resourceId('Microsoft.SignalRService/signalR', toLower(variables('signalr').name)), variables('signalr').apiVersion).primaryKey, ';Version=1.0;')]",
				"Azure__Table__ConnectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('table').name,';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('table').name), variables('table').apiVersion).keys[0].value)]"
			}
		},
		{
			"type": "Microsoft.Web/sites",
			"apiVersion": "[variables('apps').apiVersion]",
			"name": "[variables('apps').functionsAName]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('storageAcct').name)]",
				"[resourceId('Microsoft.Web/serverfarms', variables('apps').hostingPlan)]"
			],
			"tags": {},
			"kind": "functionapp",
			"identity": {
				"type": "SystemAssigned"
			},
			"properties": {
				"name": "[variables('apps').functionsAName]",
				"serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('apps').hostingPlan)]",
				"clientAffinityEnabled": false,
				"enabled": true,
				"siteConfig": {
					"alwaysOn": false,
					"cors": {
						"allowedOrigins": [
							"*"
						]
					},
					"appSettings": [
						{
							"name": "FUNCTIONS_EXTENSION_VERSION",
							"value": "~4"
						},
						{
							"name": "AzureWebJobsSecretStorageType",
							"value": "Files"
						}
					]
				}
			},
			"resources": []
		},
		{
			"type": "Microsoft.Web/sites/config",
			"apiVersion": "[variables('apps').apiVersion]",
			"name": "[concat(variables('apps').functionsAName, '/appsettings')]",
			"dependsOn": [
				"[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdb').name)]",
				"[resourceId('Microsoft.EventHub/namespaces', variables('eventhub').name)]",
				"[resourceId('Microsoft.Web/Sites', variables('apps').functionsAName)]"
			],
			"properties": {
				"FUNCTIONS_WORKER_RUNTIME": "dotnet",
				"FUNCTIONS_EXTENSION_VERSION": "~4",
				"AzureWebJobsStorage": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAcct').name,';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAcct').name), variables('storageAcct').apiVersion).keys[0].value)]",
				"AzureWebJobsDashboard": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAcct').name,';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAcct').name), variables('storageAcct').apiVersion).keys[0].value)]",
				"AzureCosmosDBConnectionString": "[listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdb').name), variables('cosmosdb').apiVersion).connectionStrings[0].connectionString]",
				"AzureEventhubRootManageSharedAccessKey": "[listkeys(resourceId('Microsoft.Eventhub/namespaces/authorizationRules', variables('eventhub').name, 'RootManageSharedAccessKey'), variables('eventhub').apiVersion).primaryConnectionString]"
			}
		},
		{
			"type": "Microsoft.Web/sites",
			"apiVersion": "[variables('apps').apiVersion]",
			"name": "[variables('apps').functionsBName]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('storageAcct').name)]",
				"[resourceId('Microsoft.Storage/storageAccounts', variables('table').name)]",
				"[resourceId('Microsoft.Web/serverfarms', variables('apps').hostingPlan)]"
			],
			"tags": {},
			"kind": "functionapp",
			"identity": {
				"type": "SystemAssigned"
			},
			"properties": {
				"name": "[variables('apps').functionsBName]",
				"serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('apps').hostingPlan)]",
				"clientAffinityEnabled": false,
				"enabled": true,
				"siteConfig": {
					"alwaysOn": false,
					"cors": {
						"allowedOrigins": [
							"*"
						]
					},
					"appSettings": [
						{
							"name": "FUNCTIONS_EXTENSION_VERSION",
							"value": "~4"
						},
						{
							"name": "AzureWebJobsSecretStorageType",
							"value": "Files"
						}
					]
				}
			},
			"resources": []
		},
		{
			"type": "Microsoft.Web/sites/config",
			"apiVersion": "[variables('apps').apiVersion]",
			"name": "[concat(variables('apps').functionsBName, '/appsettings')]",
			"dependsOn": [
				"[resourceId('Microsoft.SignalRService/SignalR', variables('signalr').name)]",
				"[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdb').name)]",
				"[resourceId('Microsoft.Web/Sites', variables('apps').functionsBName)]"
			],
			"properties": {
				"FUNCTIONS_WORKER_RUNTIME": "dotnet",
				"FUNCTIONS_EXTENSION_VERSION": "~4",
				"AzureWebJobsStorage": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAcct').name,';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAcct').name), variables('storageAcct').apiVersion).keys[0].value)]",
				"AzureWebJobsDashboard": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAcct').name,';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAcct').name), variables('storageAcct').apiVersion).keys[0].value)]",
				"AzureSignalRConnectionString": "[concat('Endpoint=https://', toLower(variables('signalr').name), '.service.signalr.net;AccessKey=', listKeys(resourceId('Microsoft.SignalRService/signalR', toLower(variables('signalr').name)), variables('signalr').apiVersion).primaryKey, ';Version=1.0;')]",
				"AzureWebJobsAzureTableConnection": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('table').name,';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('table').name), variables('table').apiVersion).keys[0].value)]",
				"AzureCosmosDBConnection": "[listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdb').name), variables('cosmosdb').apiVersion).connectionStrings[0].connectionString]"
			}
		},
		{
			"type": "Microsoft.DocumentDB/databaseAccounts",
			"apiVersion": "[variables('cosmosdb').apiVersion]",
			"name": "[variables('cosmosdb').name]",
			"location": "Japan East",
			"tags": {
				"defaultExperience": "Core (SQL)",
				"hidden-cosmos-mmspecial": ""
			},
			"kind": "GlobalDocumentDB",
			"properties": {
				"enableMultipleWriteLocations": false,
				"isVirtualNetworkFilterEnabled": false,
				"enableFreeTier": false,
				"enableAnalyticalStorage": false,
				"analyticalStorageConfiguration": {
					"schemaType": "WellDefined"
				},
				"databaseAccountOfferType": "Standard",
				"defaultIdentity": "FirstPartyIdentity",
				"minimalTlsVersion": "Tls",
				"consistencyPolicy": {
					"defaultConsistencyLevel": "Session",
					"maxIntervalInSeconds": 5,
					"maxStalenessPrefix": 100
				},
				"locations": [
					{
						"locationName": "Japan East",
						"provisioningState": "Succeeded",
						"failoverPriority": 0,
						"isZoneRedundant": false
					}
				],
				"ipRules": [],
				"backupPolicy": {
					"type": "Periodic",
					"periodicModeProperties": {
						"backupIntervalInMinutes": 240,
						"backupRetentionIntervalInHours": 8,
						"backupStorageRedundancy": "Local"
					}
				},
				"networkAclBypassResourceIds": [],
				"capacity": {
					"totalThroughputLimit": 800
				},
				"keysMetadata": {}
			}
		},
		{
			"type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
			"apiVersion": "[variables('cosmosdb').apiVersion]",
			"name": "[concat(variables('cosmosdb').name, '/SmartCameras')]",
			"dependsOn": [
				"[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdb').name)]"
			],
			"properties": {
				"resource": {
					"id": "SmartCameras"
				}
			}
		},
		{
			"type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
			"apiVersion": "[variables('cosmosdb').apiVersion]",
			"name": "[concat(variables('cosmosdb').name, '/SmartCameras/InferenceResult')]",
			"dependsOn": [
				"[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosdb').name, 'SmartCameras')]",
				"[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdb').name)]"
			],
			"properties": {
				"resource": {
					"id": "InferenceResult",
					"indexingPolicy": {
						"indexingMode": "consistent",
						"automatic": true,
						"includedPaths": [
							{
								"path": "/*"
							}
						],
						"excludedPaths": [
							{
								"path": "/\"_etag\"/?"
							}
						]
					},
					"partitionKey": {
						"paths": [
							"/partitionKey"
						],
						"kind": "Hash"
					},
					"uniqueKeyPolicy": {
						"uniqueKeys": []
					},
					"conflictResolutionPolicy": {
						"mode": "LastWriterWins",
						"conflictResolutionPath": "/_ts"
					}
				}
			}
		},
		{
			"type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/throughputSettings",
			"apiVersion": "[variables('cosmosdb').apiVersion]",
			"name": "[concat(variables('cosmosdb').name, '/SmartCameras/InferenceResult/default')]",
			"dependsOn": [
				"[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', variables('cosmosdb').name, 'SmartCameras', 'InferenceResult')]",
				"[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosdb').name, 'SmartCameras')]",
				"[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdb').name)]"
			],
			"properties": {
				"resource": {
					"throughput": 400
				}
			}
		}
	]
}